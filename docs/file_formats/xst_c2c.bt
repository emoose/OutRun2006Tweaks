//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: OutRun Coast2Coast XST sprite package
//   Authors: emoose
//   Version: 1.0
//   Purpose: Decode structures used in XST sprite packages
//  Category: 
// File Mask: *.xst
//  ID Bytes: 
//   History: 
//------------------------------------------------

// This mostly matches xst_lindbergh, but C2C added a 8 byte header that gave the system memory size / video memory size used by the file
// C2C also seems to use a pseudo-XPR0 header/entry table inside it

struct DSPDATA
{
    unsigned int scr_idx;
    unsigned short sx;
    unsigned short sy;
    unsigned short rot;
    unsigned short flip;
    float scale;
};

struct DSPTBL
{
    unsigned int nb_dspdata;
    int dspdata; // DSPDATA *
    
    FSeek(dspdata);
    DSPDATA DspData[nb_dspdata];    
};

struct SCRTBL
{
    unsigned int spr_idx;
    float su; // start
    float sv;
    float eu; // end
    float ev;
    unsigned short sx; // start
    unsigned short sy;
    unsigned short ex; // end
    unsigned short ey;
};

struct SCRTBL2 // unused?
{
    unsigned int spr_idx;
    unsigned int rotate;
    float su;
    float sv;
    float eu;
    float ev;
    unsigned short sx;
    unsigned short sy;
    unsigned short ex;
    unsigned short ey;
};

struct C2CHEAD // probably not actual struct name
{
    unsigned int SysMemSize_0;
    unsigned int VidMemSize_4;
};

struct XPR0_Header
{
    uint32 Magic;
    uint32 TotalSize;
    uint32 HeaderSize;
};

struct XPR0_Entry
{
    uint32 common;
    uint32 data;
    uint32 lock;
    uint32 format; // todo: add bitfield struct to pull out the format values
    uint32 size;
};

struct XSTHEAD
{
    unsigned int flag;
    unsigned int tex_ofs;
    unsigned int nb_tex;
    int dummy;
    unsigned int nb_dsptbl;
    int dsptbl;
    unsigned int nb_scrtbl;
    int scrtbl;
};

C2CHEAD Head1;

local long xstPos = FTell();
XSTHEAD Head;

FSeek(xstPos + Head.dsptbl);
DSPTBL DspTbl[Head.nb_dsptbl]<optimize=false>;

FSeek(xstPos + Head.scrtbl);
SCRTBL ScrTbl[Head.nb_scrtbl];

// TODO: need to look at more C2C XSTs to make sure XPR0 always follows directly after scrtbl...
XPR0_Header XPRHeader; // In C2C this seems set to nonsense values, 1 / 2 / 3 ?
XPR0_Entry XPREntries[Head.nb_scrtbl];
