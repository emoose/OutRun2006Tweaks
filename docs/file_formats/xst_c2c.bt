//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: OutRun 2 Xbox / Coast2Coast XST sprite package
//   Authors: emoose
//   Version: 1.0
//   Purpose: Decode structures used in XST sprite packages
//  Category: 
// File Mask: *.xst
//  ID Bytes: 
//   History: 
//------------------------------------------------

// This mostly matches xst_lindbergh, but Xbox/C2C added a 8 byte header that gave the system memory size / video memory size used by the file
// Xbox also follows the XST headers with an XPR0, but C2C seems to have semi-obfuscated this by setting XPR0 headers to nonsense values for some reason

struct DSPDATA
{
    unsigned int scr_idx;
    unsigned short sx;
    unsigned short sy;
    unsigned short rot;
    unsigned short flip;
    float scale;
};

struct DSPTBL(int xstOffset)
{
    unsigned int nb_dspdata;
    int dspdata; // DSPDATA *
  
    local long pos = FTell();
  
    FSeek(xstOffset + dspdata);
    DSPDATA DspData[nb_dspdata];
  
    FSeek(pos);    
};

struct SCRTBL
{
    unsigned int spr_idx;
    float su; // start
    float sv;
    float eu; // end
    float ev;
    unsigned short sx; // start
    unsigned short sy;
    unsigned short ex; // end
    unsigned short ey;
};

struct SCRTBL2 // unused?
{
    unsigned int spr_idx;
    unsigned int rotate;
    float su; // start
    float sv;
    float eu; // end
    float ev;
    unsigned short sx; // start
    unsigned short sy;
    unsigned short ex; // end
    unsigned short ey;
};

struct MEMHEAD // probably not actual struct name
{
    unsigned int SysMemSize_0;
    unsigned int VidMemSize_4;
};

// In C2C these seem set to nonsense values, 1 / 2 / 3 ?
struct XPR0_Header
{
    uint32 Magic;
    uint32 TotalSize;
    uint32 HeaderSize;
};

enum X_D3DFMT
{
    X_D3DFMT_L8 = 0x00000000,
    X_D3DFMT_AL8 = 0x00000001,
    X_D3DFMT_A1R5G5B5 = 0x00000002,
    X_D3DFMT_X1R5G5B5 = 0x00000003,
    X_D3DFMT_A4R4G4B4 = 0x00000004,
    X_D3DFMT_R5G6B5 = 0x00000005,
    X_D3DFMT_A8R8G8B8 = 0x00000006,
    X_D3DFMT_X8R8G8B8 = 0x00000007,
    X_D3DFMT_X8L8V8U8 = 0x00000007,
    X_D3DFMT_P8 = 0x0000000B,
    X_D3DFMT_DXT1 = 0x0000000C,
    //X_D3DFMT_DXT2 = 0x0000000E,
    X_D3DFMT_DXT3 = 0x0000000E,
    //X_D3DFMT_DXT4 = 0x0000000F,
    X_D3DFMT_DXT5 = 0x0000000F,
    X_D3DFMT_LIN_A1R5G5B5 = 0x00000010,
    X_D3DFMT_LIN_R5G6B5 = 0x00000011,
    X_D3DFMT_LIN_A8R8G8B8 = 0x00000012,
    X_D3DFMT_LIN_Q8W8V8U8 = 0x00000012,
    X_D3DFMT_LIN_L8 = 0x00000013,
    X_D3DFMT_LIN_R8B8 = 0x00000016,
    X_D3DFMT_LIN_V8U8 = 0x00000017,
    X_D3DFMT_LIN_G8B8 = 0x00000017,
    X_D3DFMT_A8 = 0x00000019,
    X_D3DFMT_A8L8 = 0x0000001A,
    X_D3DFMT_LIN_AL8 = 0x0000001B,
    X_D3DFMT_LIN_X1R5G5B5 = 0x0000001C,
    X_D3DFMT_LIN_A4R4G4B4 = 0x0000001D,
    X_D3DFMT_LIN_X8R8G8B8 = 0x0000001E,
    X_D3DFMT_LIN_X8L8V8U8 = 0x0000001E,
    X_D3DFMT_LIN_A8 = 0x0000001F,
    X_D3DFMT_LIN_A8L8 = 0x00000020,
    X_D3DFMT_R6G5B5 = 0x00000027,
    X_D3DFMT_L6V5U5 = 0x00000027,
    X_D3DFMT_G8B8 = 0x00000028,
    X_D3DFMT_V8U8 = 0x00000028,
    X_D3DFMT_R8B8 = 0x00000029,
    X_D3DFMT_L16 = 0x00000032,
    X_D3DFMT_V16U16 = 0x00000033,
    X_D3DFMT_LIN_L16 = 0x00000035,
    X_D3DFMT_LIN_V16U16 = 0x00000036,
    X_D3DFMT_LIN_R6G5B5 = 0x00000037,
    X_D3DFMT_LIN_L6V5U5 = 0x00000037,
    X_D3DFMT_R5G5B5A1 = 0x00000038,
    X_D3DFMT_R4G4B4A4 = 0x00000039,
    X_D3DFMT_A8B8G8R8 = 0x0000003A,
    X_D3DFMT_Q8W8V8U8 = 0x0000003A,
    X_D3DFMT_B8G8R8A8 = 0x0000003B,
    X_D3DFMT_R8G8B8A8 = 0x0000003C,
    X_D3DFMT_LIN_R5G5B5A1 = 0x0000003D,
    X_D3DFMT_LIN_R4G4B4A4 = 0x0000003E,
    X_D3DFMT_LIN_A8B8G8R8 = 0x0000003F,
    X_D3DFMT_LIN_B8G8R8A8 = 0x00000040,
    X_D3DFMT_LIN_R8G8B8A8 = 0x00000041,
};

struct D3DFORMAT
{
    int DMACHANNEL_0 : 2;
    int CUBEMAP_2 : 1;
    int BORDERSOURCE_COLOR_3 : 1;
    int DIMENSIONS_4 : 4;
    X_D3DFMT FORMAT_8 : 8;
    int MIPMAPS_16 : 4;
    int USIZE_20 : 4;
    int VSIZE_24 : 4;
    int PSIZE_28 : 4;
};

enum X_D3DCOMMON_TYPE
{
    D3DCOMMON_TYPE_VERTEXBUFFER = 0,
    D3DCOMMON_TYPE_INDEXBUFFER = 1,
    D3DCOMMON_TYPE_PUSHBUFFER = 2,
    D3DCOMMON_TYPE_PALETTE = 3,
    D3DCOMMON_TYPE_TEXTURE = 4,
    D3DCOMMON_TYPE_SURFACE = 5,
    D3DCOMMON_TYPE_FIXUP = 6
};

struct D3DCOMMON
{
    int REFCOUNT_0 : 16;
    X_D3DCOMMON_TYPE TYPE_16 : 3;
    int INTREFCOUNT_19 : 5;
    int D3DCREATED_24 : 1;
    int UNUSED_25 : 7;
};

struct XPR0_Entry
{
    D3DCOMMON common;
    uint32 data;
    uint32 lock;
    D3DFORMAT format;
    uint32 size;
};

struct XSTHEAD
{
    unsigned int flag;
    unsigned int tex_ofs;
    unsigned int nb_tex;
    int dummy;
    unsigned int nb_dsptbl;
    int dsptbl;
    unsigned int nb_scrtbl;
    int scrtbl;
};

struct TexData(int size)
{
    char data[size];
};

MEMHEAD MemHeader;

local long xstPos = FTell();
XSTHEAD Head;

FSeek(xstPos + Head.dsptbl);
DSPTBL DspTbl(xstPos)[Head.nb_dsptbl]<optimize=false>;

FSeek(xstPos + Head.scrtbl);
SCRTBL ScrTbl[Head.nb_scrtbl];

FSeek(xstPos + Head.tex_ofs);

XPR0_Header XPRHeader;
XPR0_Entry XPREntries[Head.nb_tex];

FSeek(MemHeader.SysMemSize_0 + 8);
local int i = 0;
local int size = 0;
for(i = 0; i < Head.nb_tex; i++)
{
    size = XPREntries[i].size;
    // "true" XPR0 seems to leave size field empty, have to work it out from the offset of the next entry (or EOF)
    if (size == 0 && i+1 < Head.nb_tex)
        size = XPREntries[i+1].data - XPREntries[i].data;
    if (size == 0)
        size = FileSize() - FTell();
    TexData Texture(size)<optimize=false>;    
}
