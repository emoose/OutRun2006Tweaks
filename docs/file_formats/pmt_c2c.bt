//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: OutRun 2006 Coast2Coast PMT model package
//   Authors: emoose
//   Version: 1.0
//   Purpose: Decode structures used in PMT model packages
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// C2C PMTs use most of the same structures as Lindbergh XMT
// A couple extra structs are also included, seems they're mostly the actual in-memory structures used by game at runtime
// Instead of C2C reading in each XMT struct individually, it'll pretty much just load the whole SysMem section as a blob, fix up some memory addresses, and use it as-is
// Xbox OR2 uses very similar "SMT" format instead, which has mostly the same in-memory structs as PMT, but unfortunately has many differences in the struct layouts

// Not totally sure if this runtime stuff was something added on to XMT later, or if maybe Lindbergh XMTs were just stripped down versions of these PMTs?
// Need to get a look at Chihiro versions...

struct D3DVECTOR4
{
    float x;
    float y;
    float z;
    float w;
};

struct PMTHEAD
{
    int objnum_0;
    int texnum_4;
    int SysMemDataSize_8; // VidMem begin
    int VidMemDataSize_C; // VidMem end
};

struct XMTHEAD
{
    unsigned int flag;
    unsigned int objnum;
    unsigned int texnum;
    
    // next three are zero in PMT, maybe used at runtime?
    unsigned int mdldata; // ptr
    unsigned int texdata; // ptr
    unsigned int unk;
};

struct CullingNode
{
    unsigned int flags;
    float center[3];
    float radius;
    int offset_lod;
    unsigned int tweening_factor;
    int index_matrix;
    int index_child;
    int index_sibling;
    int index_model[4];
};

struct ModelHeader
{
    int index_vtx_groups;
    int numof_vtx_groups;
};

struct VtxGroupInfo
{
    int index_vtxfmt;
    unsigned int index_mat_groups[2];
    int numof_mat_groups[2];
};

struct MatGroupInfo
{
    unsigned int base_index;
    int index_material;
    int index_primitives;
    int numof_primitives;
    float center[3];
    float radius;
};

struct PrimitiveList
{
    unsigned int primitive_type;
    unsigned int start_index;
    unsigned int primitive_count;
    unsigned int polygon_count;
};

enum<int> VertexShaderType
{
    VSTYPE_FIXED_FUNCTION = 0x0,
    VSTYPE_BUMPDOTMAP = 0x1,
    VSTYPE_TWEENING = 0x2,
    VSTYPE_BUMPCUBEMAP = 0x3,
    VSTYPE_MAX = 0x4,
};

enum<int> FvfTbl_xyz
{
    D3DFVF_XYZ = 1,
    D3DFVF_XYZRHW = 2,
    D3DFVF_XYZB1 = 3,
    D3DFVF_XYZB2 = 4,
    D3DFVF_XYZB3 = 5,
    D3DFVF_XYZB4 = 6
};

enum<int> FvfTbl_tex
{
    D3DFVF_TEX1 = 1,
    D3DFVF_TEX2 = 2,
    D3DFVF_TEX3 = 3,
    D3DFVF_TEX4 = 4
};

struct vertex_format_member // custom
{
    int unk_0 : 1;
    FvfTbl_xyz vtxType_1 : 3;
    int fvf_normal_4 : 1; // uses D3DFVF_NORMAL
    int fvf_diffuse_5 : 1; // uses D3DFVF_DIFFUSE
    int fvf_specular_6 : 1; // uses D3DFVF_SPECULAR
    int unk_7 : 1;
    FvfTbl_tex texType_8 : 4;
};

union vertex_format_bf
{
    vertex_format_member m;
    unsigned int w;
};

struct VtxFormatList(int header_offset)
{
    int numof_stream;
    unsigned int offset_indices;
    unsigned int offset_vertices[4];
    unsigned int index_buffer_size;
    unsigned int vertex_buffer_size;
    vertex_format_bf vertex_format;
    unsigned int vertex_format_size;
    VertexShaderType vertex_shader_type;
    
    // TODO: offset_indices / offset_vertices[0] are left zeroed in PMT/SMT
    // Instead the OBJECT_Raw points to some runtime structs which then point to the actual index/vertex data
    // TODO: offset_vertices[1 - 3] does contain some other data in PMT/SMT, what is it?
    
    /*
    local long pos = FTell();
    FSeek(header_offset + offset_indices);
    char index_buffer_data[index_buffer_size]<optimize=false>;
    
    // TODO: theres sometimes data between offset_indices & offset_vertices[0], what is it?
    // TODO: offset_vertices has 4 entries, but only a single vertex_buffer_size, how should it be handled?
    
    FSeek(header_offset + offset_vertices[0]);
    char vertex_buffer_data[vertex_buffer_size]<optimize=false>;
    
    FSeek(pos);
    */
};

struct M_MatAttrFlags
{
    int M_MA_SPECULAR : 1;
    int M_MA_DOUBLESIDE : 1;
    int M_MA_DOUBLESIDE_LIGHTING : 1;
    int M_MA_ZBIAS : 1;
    int M_MA_NOFOG : 1;
    int : 3;
};

struct MatAttrib_member
{
    M_MatAttrFlags flags;
    unsigned int flags : 8;
    unsigned int src_blend_factor : 4;
    unsigned int dst_blend_factor : 4;
    unsigned int blend_operation : 3;
    unsigned int pixelshader : 4;
    unsigned int zbias : 4;
    unsigned int ftype : 2;
};

union MatAttrib
{
    MatAttrib_member m;
    unsigned int w;
};

struct TexAttrib_member
{
    unsigned int flags : 10;
    unsigned int addr_u : 3;
    unsigned int addr_v : 3;
    unsigned int filter : 3;
    unsigned int mipmap : 2;
    unsigned int blend : 5;
    unsigned int alpha_blend : 2;
    unsigned int coord_index : 4;
};

union TexAttrib
{
    TexAttrib_member m;
    unsigned int w;
};

struct MatTexInfo
{
    TexAttrib attrib;
    unsigned int blendcolor;
    float mipmap_bias;
    float bump_depth;
    int index;
};

struct MaterialList
{
    local long pos = FTell();
    
    int index_color;
    MatAttrib attrib;
    MatTexInfo texture[4];
    
    if (attrib.w & 5 == 5)
        Printf("Attrib @ %x\n", pos);
};

struct MaterialColor
{
    float diffuse[4];
    float ambient[4];
    float specular[4];
    float emissive[4];
    float power;
    float intensity;
};

struct ObjectHeader
{
    unsigned int offset_cull_nodes;
    unsigned int offset_matrices;
    unsigned int offset_models;
    unsigned int offset_vtx_groups;
    unsigned int offset_mat_groups;
    unsigned int offset_primitives;
    unsigned int offset_vtx_formats;
    unsigned int offset_materials;
    unsigned int offset_mat_colors;
    
    int numof_vtx_formats;
    int numof_mat_groups; // missing in Xbox SMT
    int numof_materials;
    int numof_mat_colors;
};

struct OBJECT_Raw // in-file OBJECT, at runtime the game fixes up these offsets to become pointers
{  
    local long pos = FTell();
    
    int pTextures_0; // filled with IDirect3DTexture9* at runtime ?
    int IndexBufferPtrs_4;
    int VertexBufferPtrs_8;
    int unk_C; // points to empty area that gets filled at runtime?
    int offset_matrices; // seems more like a index buffer imho
    int ObjectData; // these point to XMT-era ObjectHeader?
    int ObjHeader; // same value as XmtObject_14?
    int offset_cull_nodes;
    int offset_models;
    int offset_vtx_groups;
    int offset_mat_groups;
    int offset_primitives;
    int offset_vtx_formats;
    int offset_materials;
    int offset_mat_colors;
    
    if (ObjectData != ObjHeader)
    {
        Printf("ObjectData != ObjHeader @ 0x%x\n", pos);    
    }
};

struct BufferPtr // aka Handle?
{
    int runtime_ptr_0; // filled at runtime
    int data_ptr_4;
    int unk_8; // zero
};

struct VertexBuffer(int xmtPos)
{
    int VertexBufferPtrs_8[4];
    local long pos = FTell();
    
    local int i = 0;
    for(i = 0; i < 4; i++)
    {
        FSeek(VertexBufferPtrs_8[i] + xmtPos);
        BufferPtr VertexBuffer;
    }
    
    FSeek(pos);
};

struct IndexBuffer(int xmtPos)
{
    int IndexBufferPtr;
    local long pos = FTell();
    
    FSeek(xmtPos + IndexBufferPtr);
    BufferPtr IndexBuffer;   
    
    FSeek(pos);
};

struct OBJECT(int xmtPos)
{
    local long startPos = FTell();
    
    OBJECT_Raw Object;
    
    local long pos = FTell();
    
    FSeek(xmtPos + Object.ObjHeader);
    ObjectHeader ObjHeader;
    
    local int numof_vtx_formats = ObjHeader.numof_vtx_formats;
    
    FSeek(xmtPos + Object.IndexBufferPtrs_4);
    IndexBuffer IdxBuffers(xmtPos)[numof_vtx_formats]<optimize=false>;
    
    FSeek(xmtPos + Object.VertexBufferPtrs_8);
    VertexBuffer VtxBuffers(xmtPos)[numof_vtx_formats]<optimize=false>;
    
    FSeek(xmtPos + Object.unk_C);
    int unk_C; // runtime pointer crap?
    
    FSeek(xmtPos + Object.offset_matrices);
    D3DVECTOR4 matrices_begin;
    
    FSeek(xmtPos + Object.offset_cull_nodes);
    CullingNode CullingNodes[1]; // TODO: work out actual cullingnode amount
    
    FSeek(xmtPos + Object.offset_models);
    ModelHeader ModelHeaders[1]; // TODO: work out actual modelheader amount
    
    FSeek(xmtPos + Object.offset_vtx_groups);
    VtxGroupInfo VtxGroups[(Object.offset_mat_groups - Object.offset_vtx_groups) / 0x14];
    
    FSeek(xmtPos + Object.offset_mat_groups);
    MatGroupInfo MatGroups[ObjHeader.numof_mat_groups]<optimize=false>;
    
    FSeek(xmtPos + Object.offset_primitives);
    PrimitiveList Primitives[ObjHeader.numof_mat_groups];
    
    FSeek(xmtPos + Object.offset_vtx_formats);
    VtxFormatList VtxFormats(startPos)[numof_vtx_formats]<optimize=false>;
    
    FSeek(xmtPos + Object.offset_materials);
    MaterialList Materials[ObjHeader.numof_materials]<optimize=false>;
    
    FSeek(xmtPos + Object.offset_mat_colors);
    MaterialColor MaterialColors[ObjHeader.numof_mat_colors]<optimize=false>;
    
    FSeek(pos);
};

struct XPR_HEADER
{
    uint32 Magic;
    uint32 TotalSize;
    uint32 HeaderSize;
};

enum X_D3DFMT
{
    X_D3DFMT_L8 = 0x00000000,
    X_D3DFMT_AL8 = 0x00000001,
    X_D3DFMT_A1R5G5B5 = 0x00000002,
    X_D3DFMT_X1R5G5B5 = 0x00000003,
    X_D3DFMT_A4R4G4B4 = 0x00000004,
    X_D3DFMT_R5G6B5 = 0x00000005,
    X_D3DFMT_A8R8G8B8 = 0x00000006,
    X_D3DFMT_X8R8G8B8 = 0x00000007,
    X_D3DFMT_X8L8V8U8 = 0x00000007,
    X_D3DFMT_P8 = 0x0000000B,
    X_D3DFMT_DXT1 = 0x0000000C,
    //X_D3DFMT_DXT2 = 0x0000000E,
    X_D3DFMT_DXT3 = 0x0000000E,
    //X_D3DFMT_DXT4 = 0x0000000F,
    X_D3DFMT_DXT5 = 0x0000000F,
    X_D3DFMT_LIN_A1R5G5B5 = 0x00000010,
    X_D3DFMT_LIN_R5G6B5 = 0x00000011,
    X_D3DFMT_LIN_A8R8G8B8 = 0x00000012,
    X_D3DFMT_LIN_Q8W8V8U8 = 0x00000012,
    X_D3DFMT_LIN_L8 = 0x00000013,
    X_D3DFMT_LIN_R8B8 = 0x00000016,
    X_D3DFMT_LIN_V8U8 = 0x00000017,
    X_D3DFMT_LIN_G8B8 = 0x00000017,
    X_D3DFMT_A8 = 0x00000019,
    X_D3DFMT_A8L8 = 0x0000001A,
    X_D3DFMT_LIN_AL8 = 0x0000001B,
    X_D3DFMT_LIN_X1R5G5B5 = 0x0000001C,
    X_D3DFMT_LIN_A4R4G4B4 = 0x0000001D,
    X_D3DFMT_LIN_X8R8G8B8 = 0x0000001E,
    X_D3DFMT_LIN_X8L8V8U8 = 0x0000001E,
    X_D3DFMT_LIN_A8 = 0x0000001F,
    X_D3DFMT_LIN_A8L8 = 0x00000020,
    X_D3DFMT_R6G5B5 = 0x00000027,
    X_D3DFMT_L6V5U5 = 0x00000027,
    X_D3DFMT_G8B8 = 0x00000028,
    X_D3DFMT_V8U8 = 0x00000028,
    X_D3DFMT_R8B8 = 0x00000029,
    X_D3DFMT_L16 = 0x00000032,
    X_D3DFMT_V16U16 = 0x00000033,
    X_D3DFMT_LIN_L16 = 0x00000035,
    X_D3DFMT_LIN_V16U16 = 0x00000036,
    X_D3DFMT_LIN_R6G5B5 = 0x00000037,
    X_D3DFMT_LIN_L6V5U5 = 0x00000037,
    X_D3DFMT_R5G5B5A1 = 0x00000038,
    X_D3DFMT_R4G4B4A4 = 0x00000039,
    X_D3DFMT_A8B8G8R8 = 0x0000003A,
    X_D3DFMT_Q8W8V8U8 = 0x0000003A,
    X_D3DFMT_B8G8R8A8 = 0x0000003B,
    X_D3DFMT_R8G8B8A8 = 0x0000003C,
    X_D3DFMT_LIN_R5G5B5A1 = 0x0000003D,
    X_D3DFMT_LIN_R4G4B4A4 = 0x0000003E,
    X_D3DFMT_LIN_A8B8G8R8 = 0x0000003F,
    X_D3DFMT_LIN_B8G8R8A8 = 0x00000040,
    X_D3DFMT_LIN_R8G8B8A8 = 0x00000041,
};

struct D3DFORMAT
{
    int DMACHANNEL_0 : 2;
    int CUBEMAP_2 : 1;
    int BORDERSOURCE_COLOR_3 : 1;
    int DIMENSIONS_4 : 4;
    X_D3DFMT FORMAT_8 : 8;
    int MIPMAPS_16 : 4;
    int USIZE_20 : 4;
    int VSIZE_24 : 4;
    int PSIZE_28 : 4;
};

enum X_D3DCOMMON_TYPE
{
    D3DCOMMON_TYPE_VERTEXBUFFER = 0,
    D3DCOMMON_TYPE_INDEXBUFFER = 1,
    D3DCOMMON_TYPE_PUSHBUFFER = 2,
    D3DCOMMON_TYPE_PALETTE = 3,
    D3DCOMMON_TYPE_TEXTURE = 4,
    D3DCOMMON_TYPE_SURFACE = 5,
    D3DCOMMON_TYPE_FIXUP = 6
};

struct D3DCOMMON
{
    int REFCOUNT_0 : 16;
    X_D3DCOMMON_TYPE TYPE_16 : 3;
    int INTREFCOUNT_19 : 5;
    int D3DCREATED_24 : 1;
    int UNUSED_25 : 7;
};

struct D3DTexture
{
    D3DCOMMON Common;
    uint32 Data;
    uint32 Lock;
    D3DFORMAT Format;
    uint32 Size;
};

struct TexData(int size)
{
    char data[size];
};

PMTHEAD PmtHead;

local long xmtPos = FTell();
XMTHEAD XmtHead;
OBJECT Object(xmtPos)[XmtHead.objnum]<optimize=false>;

int RuntimeTexPointers[XmtHead.texnum]<hidden=true>; // always 0? filled at runtime?
int RuntimeTexPointersUnk<hidden=true>; // who knows, this might come before RuntimeTexPointers

XPR_HEADER XPRHeader;
D3DTexture XPREntries[XmtHead.texnum];

local long texDataStart = PmtHead.SysMemDataSize_8 + sizeof(PMTHEAD);

FSeek(texDataStart);

local int i = 0;
local int size = 0;
for(i = 0; i < XmtHead.texnum; i++)
{
    size = 0; // TODO: XPREntries[i].Size field is invalid in PMT?
    // "true" XPR0 seems to leave size field empty, have to work it out from the offset of the next entry (or EOF)
    if (size == 0 && i+1 < XmtHead.texnum)
        size = XPREntries[i+1].Data - XPREntries[i].Data;
    if (size == 0)
        size = FileSize() - FTell();
    TexData Texture(size)<optimize=false>;    
}
